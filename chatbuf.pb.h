// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatbuf.proto

#ifndef PROTOBUF_chatbuf_2eproto__INCLUDED
#define PROTOBUF_chatbuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SyncDemo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chatbuf_2eproto();
void protobuf_AssignDesc_chatbuf_2eproto();
void protobuf_ShutdownFile_chatbuf_2eproto();

class ChatMessage;

enum ChatMessage_ChatMessageType {
  ChatMessage_ChatMessageType_CHAT = 0,
  ChatMessage_ChatMessageType_HELLO = 1,
  ChatMessage_ChatMessageType_LEAVE = 2,
  ChatMessage_ChatMessageType_JOIN = 3,
  ChatMessage_ChatMessageType_OTHER = 4
};
bool ChatMessage_ChatMessageType_IsValid(int value);
const ChatMessage_ChatMessageType ChatMessage_ChatMessageType_ChatMessageType_MIN = ChatMessage_ChatMessageType_CHAT;
const ChatMessage_ChatMessageType ChatMessage_ChatMessageType_ChatMessageType_MAX = ChatMessage_ChatMessageType_OTHER;
const int ChatMessage_ChatMessageType_ChatMessageType_ARRAYSIZE = ChatMessage_ChatMessageType_ChatMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_ChatMessageType_descriptor();
inline const ::std::string& ChatMessage_ChatMessageType_Name(ChatMessage_ChatMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_ChatMessageType_descriptor(), value);
}
inline bool ChatMessage_ChatMessageType_Parse(
    const ::std::string& name, ChatMessage_ChatMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_ChatMessageType>(
    ChatMessage_ChatMessageType_descriptor(), name, value);
}
// ===================================================================

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatMessage_ChatMessageType ChatMessageType;
  static const ChatMessageType CHAT = ChatMessage_ChatMessageType_CHAT;
  static const ChatMessageType HELLO = ChatMessage_ChatMessageType_HELLO;
  static const ChatMessageType LEAVE = ChatMessage_ChatMessageType_LEAVE;
  static const ChatMessageType JOIN = ChatMessage_ChatMessageType_JOIN;
  static const ChatMessageType OTHER = ChatMessage_ChatMessageType_OTHER;
  static inline bool ChatMessageType_IsValid(int value) {
    return ChatMessage_ChatMessageType_IsValid(value);
  }
  static const ChatMessageType ChatMessageType_MIN =
    ChatMessage_ChatMessageType_ChatMessageType_MIN;
  static const ChatMessageType ChatMessageType_MAX =
    ChatMessage_ChatMessageType_ChatMessageType_MAX;
  static const int ChatMessageType_ARRAYSIZE =
    ChatMessage_ChatMessageType_ChatMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatMessageType_descriptor() {
    return ChatMessage_ChatMessageType_descriptor();
  }
  static inline const ::std::string& ChatMessageType_Name(ChatMessageType value) {
    return ChatMessage_ChatMessageType_Name(value);
  }
  static inline bool ChatMessageType_Parse(const ::std::string& name,
      ChatMessageType* value) {
    return ChatMessage_ChatMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string to = 1;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 1;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // required string from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required .SyncDemo.ChatMessage.ChatMessageType type = 3 [default = CHAT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::SyncDemo::ChatMessage_ChatMessageType type() const;
  inline void set_type(::SyncDemo::ChatMessage_ChatMessageType value);

  // optional string data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required int32 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SyncDemo.ChatMessage)
 private:
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* to_;
  ::std::string* from_;
  ::std::string* data_;
  int type_;
  ::google::protobuf::int32 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_chatbuf_2eproto();
  friend void protobuf_AssignDesc_chatbuf_2eproto();
  friend void protobuf_ShutdownFile_chatbuf_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatMessage

// required string to = 1;
inline bool ChatMessage::has_to() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_to() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_to() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& ChatMessage::to() const {
  return *to_;
}
inline void ChatMessage::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void ChatMessage::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void ChatMessage::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* ChatMessage::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string from = 2;
inline bool ChatMessage::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& ChatMessage::from() const {
  return *from_;
}
inline void ChatMessage::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void ChatMessage::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void ChatMessage::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* ChatMessage::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .SyncDemo.ChatMessage.ChatMessageType type = 3 [default = CHAT];
inline bool ChatMessage::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SyncDemo::ChatMessage_ChatMessageType ChatMessage::type() const {
  return static_cast< ::SyncDemo::ChatMessage_ChatMessageType >(type_);
}
inline void ChatMessage::set_type(::SyncDemo::ChatMessage_ChatMessageType value) {
  assert(::SyncDemo::ChatMessage_ChatMessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string data = 4;
inline bool ChatMessage::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ChatMessage::data() const {
  return *data_;
}
inline void ChatMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ChatMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ChatMessage::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ChatMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 timestamp = 5;
inline bool ChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 ChatMessage::timestamp() const {
  return timestamp_;
}
inline void ChatMessage::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SyncDemo

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SyncDemo::ChatMessage_ChatMessageType>() {
  return ::SyncDemo::ChatMessage_ChatMessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chatbuf_2eproto__INCLUDED
